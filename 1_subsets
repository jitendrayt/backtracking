/*

Given an distinct integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]




Notes :-

1. This problem is a classic example of backtracking and can be solved by recursion + backtracking.
2. In this problem at every step/element in array we are given a choice of whether considering that element for our current set
or omiting it.
3. That means we have 2 choices for every element resulting a runtime of 2^N.






*/



  Solution 1:
  
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
        vector<vector<int>> ans;
        
        backtrack(nums,ans,{},0);
        
        return ans;
        
        
    }
    
    void backtrack(vector<int> nums,vector<vector<int>> & ans,vector<int> curr,int index)
    {
        if(index>=nums.size())
        {
            ans.push_back(curr);
            return;
        }
        
        backtrack(nums,ans,curr,index+1);   //We're not choosing the current element.
        
        curr.push_back(nums[index]);
        backtrack(nums,ans,curr,index+1);   //We are choosing the element.
        curr.pop_back();
        
        
    }
    /*
    
                              The recursion tree for the above approach is given below:-
    
    
    
    
                                                          [1,2,3]
                                                        /        \
                                                 [][2,3]          [1][2,3]
                                                /   \                /    \
                                           [][3]     [2][3]     [1][3]     [1,2][3]
                                          / \        /   \        / \       /     \
                              ans=      []  [3]    [2]  [2,3]  [1]  [1,3] [1,2]    [1,2,3]
    
    
        //As we can see from the tree The above code will give result at the
        //end of the recursion tree, thus gurenteeing a
        //runtime of 2^N.
    
    
    
    
    
    
    
      */  
        
       
        
   
    };
    
  
        // Below solution is dfs and may give better runtime
        //for different scenerios.
        
        
    // Solution 2:
    

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
        vector<vector<int>> ans;
        
        backtrack(nums,ans,{},0);
        
        return ans;
        
        
    }
    void backtrack(vector<int> nums,vector<vector<int>> &ans,vector<int> curr,int index)
    {
        ans.push_back(curr);
        if(index>=nums.size()) return;
        
        for(int i=index;i<nums.size();i++)
        {
            curr.push_back(nums[i]);
            backtrack(nums,ans,curr,i+1);
            curr.pop_back();
        }
        
    }
        
        
/*
                            The recursion tree for the above approach is given below:-



                                                    [1,2,3]
                                                   / |  |  \
                                                 [] [1] [2] [3]
                                                    / |   |    
                                               [1,2][1,3][2,3]  
                                              /   
                                        [1,2,3]
                                        
                               We will get an answer at each step of the recursion.


*/
    
};
