/*

7. Combinations
Medium

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Example 2:

Input: n = 1, k = 1
Output: [[1]]




Notes :-

1.This is a simple backtracking question and can be easily solved if you have solved previous questions.
2. only catch is to reduce the number of recursive call at each stage we only iterate through index to 
n-k+1 beause we want at least k numbers and if we iterate after n-k+1 there won't be k numbers for next 
calls.
*/



Solution 1:-

class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        
        
        vector<vector<int>> ans;
        vector<int> curr;
        
        dfs(ans,curr,n,k,1);
        return ans;
        
        
    }
    
    void dfs(vector<vector<int>> &ans,vector<int> curr,int n,int k,int index)
    {
        if(k==0)
        {
            ans.push_back(curr);
            return;
        }
        for(int i=index; i<=n-k+1; i++){
/*
// reason for n-k+1 is that we don't want to use the element after which there are not enough elements
// left to form a combination of k elements in below recursion levels.
// +1 is beacuse the numbers are from 1 to n and it's not an array.
// for ex : n=5,k=3 it's fine till i=3 because we'll be left with k=2 and  4,5 for next levels.  
        {
// reason for i=index is that we don't want permutations but we want combinations ,
//and all combinations before i=index would have already been processed earlier. 
//[1,3] would be same as [3,1]
*/
            k-=1;
            curr.push_back(i);
            dfs(ans,curr,n,k,i+1);
            k+=1;
            curr.pop_back();
        }
        
    }
};
